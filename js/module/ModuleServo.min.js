class ClassServo extends ClassMiddleActuator{constructor(_actuatorProps,_opts){if(ClassMiddleActuator.call(this,_actuatorProps,_opts),"number"!=typeof _opts.range||"number"!=typeof _opts.maxPulse||"number"!=typeof _opts.minPulse)throw new Error("Some args are missing");if(_opts.range<0||_opts.minPulse>=_opts.maxPulse||_opts.startPos&&"number"!=typeof _opts.startPos||_opts.startPos<0||_opts.startPos>_opts.range)throw new Error("Invalid arg");this._Range=_opts.range,this._MaxPulse=_opts.maxPulse,this._MinPulse=_opts.minPulse,this._StartPos=_opts.startPos||0,this._Position=void 0}On(_chNum,_pos){if("number"!=typeof _pos)throw new Error("Invalid arg");let pos=E.clip(_pos,0,1);if(_pos!==pos)throw new Error("Invalid degree value");const proportion=(x,in_low,in_high,out_low,out_high)=>(x-in_low)*(out_high-out_low)/(in_high-in_low)+out_low,freq=50,msec=proportion(pos,0,1,this._MinPulse,this._MaxPulse),val=proportion(msec,0,20,0,1);this._IsChOn[0]=!0,analogWrite(this._Pins[0],val,{freq:50,soft:!1}),this._Position=pos}Off(){digitalWrite(this._Pins[0],1),this._IsChOn[0]=!1}Reset(){this.On(0,this._StartPos)}GetInfo(){return{currPos:this._Position,currPosAngle:this._Position*this._Range}}}exports=ClassServo;